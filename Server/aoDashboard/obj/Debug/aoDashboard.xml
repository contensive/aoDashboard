<?xml version="1.0"?>
<doc>
<assembly>
<name>
aoDashboard
</name>
</assembly>
<members>
<member name="T:Contensive.Addons.Dashboard.My.Resources.Resources">
<summary>
  A strongly-typed resource class, for looking up localized strings, etc.
</summary>
</member>
<member name="P:Contensive.Addons.Dashboard.My.Resources.Resources.ResourceManager">
<summary>
  Returns the cached ResourceManager instance used by this class.
</summary>
</member>
<member name="P:Contensive.Addons.Dashboard.My.Resources.Resources.Culture">
<summary>
  Overrides the current thread's CurrentUICulture property for all
  resource lookups using this strongly typed resource class.
</summary>
</member>
<member name="M:Contensive.Addons.Dashboard.Models.NodeModel.getNodeHtml(Contensive.BaseClasses.CPBaseClass,System.String,System.String,System.String,System.String,System.Int32,System.Int32,System.String,Contensive.Addons.Dashboard.Models.ConfigModel.ConfigNodeState,System.Int32,System.String,System.Int32,System.String,System.Int32)">
 <summary>
 create the html for the node from individual node values (transitional signature)
 </summary>
 <param name="cp"></param>
 <param name="AddonIdOrGuid"></param>
 <param name="ContentGuid"></param>
 <param name="ContentName"></param>
 <param name="Title"></param>
 <param name="PosX"></param>
 <param name="PosY"></param>
 <param name="State"></param>
 <param name="SizeX"></param>
 <param name="SizeY"></param>
 <param name="AddonOptions"></param>
 <param name="WrapperID"></param>
 <param name="NodeKey"></param>
 <param name="IconZIndex"></param>
 <returns></returns>
</member>
<member name="P:Contensive.Addons.Dashboard.Models.RequestModel.key">
 <summary>
 the node being acted on
 </summary>
 <returns></returns>
</member>
<member name="P:Contensive.Addons.Dashboard.Models.RequestModel.x">
 <summary>
 the x (left) position of the node being acted on
 </summary>
 <returns></returns>
</member>
<member name="P:Contensive.Addons.Dashboard.Models.RequestModel.y">
 <summary>
 the y (top) position of the node being acted on
 </summary>
 <returns></returns>
</member>
<member name="P:Contensive.Addons.Dashboard.Models.RequestModel.id">
 <summary>
 A key for new nodes being added. 
 Created by Admin Navigator (and maybe others later)
 For addons, the key is a followed by the addon Id
 </summary>
 <returns></returns>
</member>
<member name="M:Contensive.Addons.Dashboard.Models.RequestModel.#ctor(Contensive.BaseClasses.CPBaseClass)">
 <summary>
 constructor
 </summary>
 <param name="cp"></param>
</member>
<member name="M:Contensive.Addons.Dashboard.Models.baseModel.#ctor">
 <summary>
 Create an empty object. needed for deserialization
 </summary>
</member>
<member name="M:Contensive.Addons.Dashboard.Models.baseModel.add``1(Contensive.BaseClasses.CPBaseClass)">
 <summary>
 Add a new recod to the db and open it. Starting a new model with this method will use the default values in Contensive metadata (active, contentcontrolid, etc).
 include callersCacheNameList to get a list of cacheNames used to assemble this response
 </summary>
 <param name="cp"></param>
 <returns></returns>
</member>
<member name="M:Contensive.Addons.Dashboard.Models.baseModel.create``1(Contensive.BaseClasses.CPBaseClass,System.Int32)">
 <summary>
 return a new model with the data selected. All cacheNames related to the object will be added to the cacheNameList.
 </summary>
 <param name="cp"></param>
 <param name="recordId">The id of the record to be read into the new object</param>
</member>
<member name="M:Contensive.Addons.Dashboard.Models.baseModel.create``1(Contensive.BaseClasses.CPBaseClass,System.String)">
 <summary>
 open an existing object
 </summary>
 <param name="cp"></param>
 <param name="recordGuid"></param>
</member>
<member name="M:Contensive.Addons.Dashboard.Models.baseModel.createByName``1(Contensive.BaseClasses.CPBaseClass,System.String)">
 <summary>
 open an existing object
 </summary>
 <param name="cp"></param>
 <param name="recordName"></param>
</member>
<member name="M:Contensive.Addons.Dashboard.Models.baseModel.loadRecord``1(Contensive.BaseClasses.CPBaseClass,Contensive.BaseClasses.CPCSBaseClass)">
 <summary>
 open an existing object
 </summary>
 <param name="cp"></param>
 <param name="cs"></param>
</member>
<member name="M:Contensive.Addons.Dashboard.Models.baseModel.save(Contensive.BaseClasses.CPBaseClass)">
 <summary>
 save the instance properties to a record with matching id. If id is not provided, a new record is created.
 </summary>
 <param name="cp"></param>
 <returns></returns>
</member>
<member name="M:Contensive.Addons.Dashboard.Models.baseModel.delete``1(Contensive.BaseClasses.CPBaseClass,System.Int32)">
 <summary>
 delete an existing database record by id
 </summary>
 <param name="cp"></param>
 <param name="recordId"></param>
</member>
<member name="M:Contensive.Addons.Dashboard.Models.baseModel.delete``1(Contensive.BaseClasses.CPBaseClass,System.String)">
 <summary>
 delete an existing database record by guid
 </summary>
 <param name="cp"></param>
 <param name="ccguid"></param>
</member>
<member name="M:Contensive.Addons.Dashboard.Models.baseModel.createList``1(Contensive.BaseClasses.CPBaseClass,System.String,System.String)">
 <summary>
 pattern get a list of objects from this model
 </summary>
 <param name="cp"></param>
 <param name="sqlCriteria"></param>
 <returns></returns>
</member>
<member name="M:Contensive.Addons.Dashboard.Models.baseModel.getRecordName``1(Contensive.BaseClasses.CPBaseClass,System.Int32)">
 <summary>
 get the name of the record by it's id
 </summary>
 <param name="cp"></param>
 <param name="recordId"></param>record
 <returns></returns>
</member>
<member name="M:Contensive.Addons.Dashboard.Models.baseModel.getRecordName``1(Contensive.BaseClasses.CPBaseClass,System.String)">
 <summary>
 get the name of the record by it's guid 
 </summary>
 <param name="cp"></param>
 <param name="ccGuid"></param>record
 <returns></returns>
</member>
<member name="M:Contensive.Addons.Dashboard.Models.baseModel.getRecordId``1(Contensive.BaseClasses.CPBaseClass,System.String)">
 <summary>
 get the id of the record by it's guid 
 </summary>
 <param name="cp"></param>
 <param name="ccGuid"></param>record
 <returns></returns>
</member>
<member name="M:Contensive.Addons.Dashboard.Models.baseModel.getUploadPath``1(System.String)">
 <summary>
 Temporary method to create a path for an uploaded. First, try the texrt value in the field. If it is empty, use this method to create the path,
 append the filename to the end and save it to the field, and save the file there. This path starts with the tablename and ends with a slash.
 </summary>
 <param name="fieldName"></param>
 <returns></returns>
</member>
<member name="F:Contensive.Addons.Dashboard.Models.ConfigModel.ConfigNodeModel.key">
 <summary>
 The htmlId of the node. 
 Also the key into the dictionary of these objects.
 Also the prefix for other html structions: 
 </summary>
</member>
<member name="F:Contensive.Addons.Dashboard.Models.ConfigModel.ConfigNodeModel.contentName">
 <summary>
 optional, if provided this icon will link to the content list page
 </summary>
</member>
<member name="F:Contensive.Addons.Dashboard.Models.ConfigModel.ConfigNodeModel.addonGUID">
 <summary>
 opional, if provided this icon will link to the execution of this addon
 </summary>
</member>
<member name="F:Contensive.Addons.Dashboard.Models.ConfigModel.ConfigNodeModel.title">
 <summary>
 title for this node
 </summary>
</member>
<member name="F:Contensive.Addons.Dashboard.Models.ConfigModel.ConfigNodeModel.state">
 <summary>
 open, closed, etc - convert to an enumeration
 </summary>
</member>
<member name="F:Contensive.Addons.Dashboard.Models.ConfigModel.ConfigNodeModel.sizex">
 <summary>
 the width
 </summary>
</member>
<member name="F:Contensive.Addons.Dashboard.Models.ConfigModel.ConfigNodeModel.sizey">
 <summary>
 the height
 </summary>
</member>
<member name="F:Contensive.Addons.Dashboard.Models.ConfigModel.ConfigNodeModel.addonArgList">
 <summary>
 if node is for an addon, set these request properties first
 </summary>
</member>
<member name="F:Contensive.Addons.Dashboard.Models.ConfigModel.ConfigNodeModel.x">
 <summary>
 The style top for the object
 </summary>
</member>
<member name="F:Contensive.Addons.Dashboard.Models.ConfigModel.ConfigNodeModel.y">
 <summary>
 the style left for the object
 </summary>
</member>
<member name="F:Contensive.Addons.Dashboard.Models.ConfigModel.ConfigNodeModel.z">
 <summary>
 The html style z index for this object
 </summary>
</member>
<member name="F:Contensive.Addons.Dashboard.Models.ConfigModel.ConfigNodeModel.wrapperId">
 <summary>
 currently not used. The id of the wrapper object
 </summary>
</member>
<member name="M:Contensive.Addons.Dashboard.Models.ConfigModel.create(Contensive.BaseClasses.CPBaseClass,System.Int32)">
 <summary>
 Create a config model of the user. If not found, one is created.
 </summary>
 <param name="cp"></param>
 <param name="userId"></param>
 <returns></returns>
</member>
<member name="M:Contensive.Addons.Dashboard.Models.ConfigModel.load(Contensive.BaseClasses.CPBaseClass,System.Int32)">
 <summary>
 load config for a user. Returns null if config file not found
 </summary>
 <param name="cp"></param>
 <param name="userId"></param>
 <returns></returns>
</member>
<member name="M:Contensive.Addons.Dashboard.Models.ConfigModel.save(Contensive.BaseClasses.CPBaseClass,System.Int32)">
 <summary>
 save config for a specified user. Needed to save for the default user=0 
 </summary>
 <param name="cp"></param>
 <param name="userId"></param>
</member>
<member name="M:Contensive.Addons.Dashboard.Models.ConfigModel.save(Contensive.BaseClasses.CPBaseClass)">
 <summary>
 save config for the current user
 </summary>
 <param name="cp"></param>
</member>
<member name="M:Contensive.Addons.Dashboard.Views.DashboardClass.Execute(Contensive.BaseClasses.CPBaseClass)">
 <summary>
 addon that generates the dashboard html
 </summary>
 <param name="cp"></param>
 <returns></returns>
</member>
<member name="M:Contensive.Addons.Dashboard.Views.DashDragStopClass.Execute(Contensive.BaseClasses.CPBaseClass)">
 <summary>
 remote method called when a node is dragged to a new location and stopped (mouse button released)
 </summary>
 <param name="CP"></param>
 <returns></returns>
</member>
<member name="M:Contensive.Addons.Dashboard.Views.DelNodeClass.Execute(Contensive.BaseClasses.CPBaseClass)">
 <summary>
 remote method called when a node is deleted on the desktop (click the delete link on the handle)
 </summary>
 <param name="CP"></param>
 <returns></returns>
</member>
<member name="M:Contensive.Addons.Dashboard.Views.NavDropClass.Execute(Contensive.BaseClasses.CPBaseClass)">
 <summary>
 remote method called when new node is added by dragging an admin navigator
 </summary>
 <param name="CP"></param>
 <returns></returns>
</member>
<member name="M:Contensive.Addons.Dashboard.Views.OpenNodeClass.Execute(Contensive.BaseClasses.CPBaseClass)">
 <summary>
 change a node state to open and return the html
 </summary>
 <param name="CP"></param>
 <returns></returns>
</member>
<member name="M:Contensive.Addons.Dashboard.Views.CloseNodeClass.Execute(Contensive.BaseClasses.CPBaseClass)">
 <summary>
 remote method to change the state of a node to closed
 </summary>
 <param name="cp"></param>
 <returns></returns>
</member>
<member name="M:Contensive.Addons.Dashboard.Controllers.genericController.getGUID(Contensive.BaseClasses.CPBaseClass,System.Boolean@)">
 <summary>
 return a normalized guid in registry format
 </summary>
 <param name="CP"></param>
 <param name="registryFormat"></param>
 <returns></returns>
</member>
</members>
</doc>
